# Method 1
# 动态规划

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 
        n=len(nums)
        dp=[1]*n
        ans=-1
        for i in range(n):
            for j in range(i):
                if(nums[i]>nums[j]):
                    dp[i]=max(dp[i],dp[j]+1)
            ans=max(ans,dp[i])
        return ans
        
        
 # 贪心+二分
 
 class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        a=[]    # a是我们的最长子序列
        for n in nums: 
            if not a or a[-1]<n:        # 如果序列为空，或者子序列的最大值小于当前值，把当前值加入序列即可 
                a.append(n)
                continue
            l,r=0,len(a)-1
            loc=r                  # 初始化一个loc,他最终的位置指向我们要插入的值的位置。loc指向的位置是第一个大于n的值的坐标。
            while l<=r:            # 二分查找的循环条件是 <=
                mid=(l+r)//2       # // 取整
                if(a[mid]>=n):     # r是从大往小找的，这个时候我们的loc也逐渐向目标位置靠拢。
                    loc=mid          # 
                    r=mid-1
                else:
                    l=mid+1
            a[loc]=n
            print(a)
        return len(a)
