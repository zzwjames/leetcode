class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return list()
        phoneMap={
             "2": "abc",
             "3": "def",
             "4": "ghi",
             "5": "jkl",
             "6": "mno",
             "7": "pqrs",
             "8": "tuv",
             "9": "wxyz",
        }
        def backtrack(index: int):   # index为字母的位置下标
            if(index==len(digits)):
                combinations.append("".join(combination))
            else:
                digit=digits[index]  # digit为字母
                for letter in phoneMap[digit]:   # 遍历每一层（遍历的时候也会有限制条件，只不过这道题没有）
                    combination.append(letter)   # 
                    backtrack(index+1)
                    combination.pop()
        

        combinations=list()
        combination=list()
        backtrack(0)
        return combinations
