# Method 1

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ans=0
        n=len(prices)
        for i in range(1,n):
            if prices[i]>prices[i-1]:
                ans+=(prices[i]-prices[i-1])        #只要有钱就挣，不管挣多少，最后加在一起就是最高的
        return ans
        
        
 # Method 2
 # 动态规划
 # dp[i][0]表示第i天之后，手里没有股票的最大利润
 # dp[i][1]表示第i天之后，手里有股票的最大利润
 
 
 # Method 2
 class Solution {
 public:
     int maxProfit(vector<int>& prices) {
         int n = prices.size();
         int dp[n][2];
         dp[0][0] = 0, dp[0][1] = -prices[0];  # dp[i][0]表示第i天之后手里没有股票的最大利润，dp[i][1]表示第i天之后手里有股票的最大利润
         for (int i = 1; i < n; ++i) {
             dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);  # 状态转移方程
             dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
         }
         return dp[n - 1][0];
     }
 };
 
 
 
