class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        def myBuildTree(preorder_left: int, preorder_right: int, inorder_left: int, inorder_right: int):
            if(preorder_left>preorder_right or inorder_left>inorder_right):
                return None
            inorder_root=index[preorder[preorder_left]]  # find the index of root in inorder list
            root=TreeNode(preorder[preorder_left])
            left_size=inorder_root-inorder_left
            root.left=myBuildTree(preorder_left+1,preorder_left+left_size,inorder_left,inorder_root-1)
            root.right=myBuildTree(preorder_left+left_size+1,preorder_right,inorder_root+1,inorder_right)
            return root




        n=len(preorder)
        index={element:i for i,element in enumerate(inorder)}
        return myBuildTree(0,n-1,0,n-1)
